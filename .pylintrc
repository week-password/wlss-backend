[MAIN]

# Pydantic library was added here to prevent `no-name-in-module` error from pylint
# it looks really weird because all imports from pydantic are resolved with no issues
# so probably pylint reports this error because pydantic has some part of the code written
# in C language. I don't know actually whether this is a correct way to handle it
# So you can check the links below to know more about this issue
# https://pylint.pycqa.org/en/v2.17.4/user_guide/messages/error/no-member.html
# https://github.com/pydantic/pydantic/issues/1961
extension-pkg-whitelist=pydantic


disable =
    # options listed here are disabled because we don't want to check them
    # for a different reasons, but if you want to disable some option because it's already
    # implemented in other linter we use, please do it in a separate section below
    consider-using-assignment-expr,  # assignment expressions can make code difficult to read
    duplicate-code,

    # options below are disabled because they are already implemented in ruff
    # if you want to disable another error for some reason, please do it in a separate section above
    anomalous-backslash-in-string,
    assert-on-string-literal,
    assert-on-tuple,
    await-outside-async,
    bad-classmethod-argument,
    bad-docstring-quotes,
    bad-format-string,
    bad-format-string-key,
    bad-str-strip-call,
    bad-string-format-type,
    bare-except,
    bidirectional-unicode,
    binary-op-exception,
    broad-exception-caught,
    cell-var-from-loop,
    comparison-of-constants,
    consider-alternative-union-syntax,
    consider-merging-isinstance,
    consider-ternary-expression,
    consider-using-alias,
    consider-using-any-or-all,
    consider-using-dict-comprehension,
    consider-using-generator,
    consider-using-get,
    consider-using-set-comprehension,
    consider-using-sys-exit,
    consider-using-ternary,
    continue-in-finally,
    dangerous-default-value,
    docstring-first-line-empty,
    duplicate-except,
    duplicate-key,
    duplicate-string-formatting-argument,
    else-if-used,
    empty-docstring,
    expression-not-assigned,
    f-string-without-interpolation,
    forgotten-debug-statement,
    format-needs-mapping,
    format-string-without-interpolation,
    global-statement,
    global-variable-not-assigned,
    inconsistent-quotes,
    inconsistent-return-statements,
    invalid-all-format,
    invalid-all-object,
    invalid-character-backspace,
    invalid-character-esc,
    invalid-character-nul,
    invalid-character-sub,
    invalid-character-zero-width-space,
    invalid-envvar-default,
    invalid-name,
    line-too-long,
    literal-comparison,
    logging-too-few-args,
    logging-too-many-args,
    misplaced-comparison-constant,
    misplaced-future,
    missing-class-docstring,
    missing-final-newline,
    missing-format-string-key,
    missing-function-docstring,
    missing-module-docstring,
    mixed-format-string,
    multiple-imports,
    no-method-argument,
    no-self-argument,
    nonexistent-operator,
    nonlocal-without-binding,
    not-in-loop,
    notimplemented-raised,
    pointless-statement,
    redefined-builtin,
    return-in-init,
    return-outside-function,
    singleton-comparison,
    super-with-arguments,
    superfluous-parens,
    syntax-error,
    too-complex,
    too-many-branches,
    too-many-return-statements,
    too-many-statements,
    trailing-comma-tuple,
    truncated-format-string,
    undefined-variable,
    ungrouped-imports,
    unidiomatic-typecheck,
    unnecessary-comprehension,
    unnecessary-direct-lambda-call,
    unnecessary-lambda-assignment,
    unused-argument,
    unused-format-string-argument,
    unused-format-string-key,
    unused-import,
    unused-variable,
    use-a-generator,
    use-dict-literal,
    use-list-literal,
    used-prior-global-declaration,
    useless-else-on-loop,
    useless-import-alias,
    useless-object-inheritance,
    useless-return,
    wildcard-import,
    wrong-import-order,
    wrong-import-position,
    yield-outside-function,

load-plugins =
    pylint_per_file_ignores,  # This pylint plugin will enable per-file-ignores in your project
    pylint_pydantic,  # A Pylint plugin to help Pylint understand the Pydantic.
    pylint.extensions.bad_builtin,  # It can be used for finding prohibited used builtins, such as map or filter, for which other alternatives exists.
    pylint.extensions.broad_try_clause,  # Maximum number of statements allowed in a try clause.
    pylint.extensions.check_elif,  # Used when an else statement is immediately followed by an if statement and does not contain statements that would be unrelated to it.
    pylint.extensions.code_style,  # Checkers that can improve code consistency. As such they don't necessarily provide a performance benefit and are often times opinionated.
    pylint.extensions.comparetozero,  # "%s" can be simplified to "%s" as 0 is falsey Used when Pylint detects comparison to a 0 constant.
    pylint.extensions.comparison_placement,  # Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.
    pylint.extensions.confusing_elif,  # Used when an elif statement follows right after an indented block which itself ends with if or elif. It may not be ovious if the elif statement was willingly or mistakenly unindented.
    pylint.extensions.consider_ternary_expression,  # Multiple assign statements spread across if/else blocks can be rewritten with a single assignment and ternary expression.
    pylint.extensions.docparams,  # If you document the parameters of your functions, methods and constructors and their types systematically in your code this optional component might be useful for you.
    pylint.extensions.docstyle,  # Checks bad docstring quotes and first line emptiness.
    pylint.extensions.empty_comment,  # Used when a # symbol appears on a line not followed by an actual comment.
    pylint.extensions.emptystring,  # Used when Pylint detects comparison to an empty string constant.
    pylint.extensions.eq_without_hash,  # Used when a class implements __eq__ but not __hash__.
    pylint.extensions.for_any_all,  # A for loop that checks for a condition and return a bool can be replaced with any or all.
    pylint.extensions.mccabe,  # You can now use this plugin for finding complexity issues in your code base.
    pylint.extensions.no_self_use,  # Used when a method doesn't use its bound instance, and so could be written as a function.
    pylint.extensions.overlapping_exceptions,  # Used when exceptions in handler overlap or are identical.
    pylint.extensions.private_import,  # Used when a private module or object prefixed with _ is imported.
    pylint.extensions.redefined_loop_name,  # Used when a loop variable is overwritten in the loop body.
    pylint.extensions.redefined_variable_type,  # Used when the type of a variable changes inside a method or a function.
    pylint.extensions.set_membership,  # Membership tests are more efficient when performed on a lookup optimized datatype like sets.
    pylint.extensions.typing,  # Find issue specifically related to type annotations
    pylint.extensions.while_used,  # While loops can often be rewritten as bounded for loops.


[BASIC]

# Bad variable names which should always be refused, separated by a comma.
bad-names =
    bar,
    baz,
    f,
    foo,
    r,
    u,
    x,

# Good variable names which should always be accepted, separated by a comma.
good-names =
    f,
    i,
    j,
    k,
    _,

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = yes


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable =
    useless-suppression,  # Reported when a message is explicitly disabled for a line or a block of code, but never triggered.


[SPELLING]

# Spelling dictionary name. To make it working install python-enchant package.
spelling-dict = en_US

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives =
    mypy:,
    noqa,
    noqa:,
    pragma:,
    type:,

# Disable spellcheck error for words listed in this file
spelling-private-dict-file = whitelist.txt


[STRING]

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = yes
